// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Status {
  active
  blocked
}

enum IntrumentType {
  InvIT
  IDR
  MFs
  PreferenceShares
  REiT
  Equity
  Warrant
}

enum EquityType {
  Bonus
  Rights
  Splits
  Shares
}

enum CorporateActionType {
  Equity
  Bonus
  Rights
  Splits
  ShareBought
}

enum TruthType {
  Yes
  No
}

enum PendingFromType {
  Client
  RTA
  IEPF
  ServiceProvider
}

enum CommunicationStageType {
  DocumentsCouriered
  DocumentsReceived
}

enum CaseType {
  Claim
  ClaimTransposition
  ClaimIssueDuplicate
  Transmission
  TransmissionIssueDuplicate
  TransmissionIssueDuplicateTransposition
  Deletion
  DeletionIssueDuplicate
  DeletionIssueDuplicateTransposition
}

enum PaymentStatus {
  InvoiceSent
  Paid
  ReceiptSent
  ToBePaid
}

model User {
  id        Int      @id @default(autoincrement())
  name      String  @db.VarChar(256)
  email     String   @db.VarChar(256) @unique
  password     String   @db.VarChar(256)
  role      Role     @default(user)
  status      Status     @default(active)
  key      String? @default(uuid()) @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  tokens Token[]
  failedExcels FailedExcel[]
  registrarMasters RegistrarMaster[]
  companyMasters CompanyMaster[]
  projects Project[]

  @@unique([id, email], map: "idx_email_userkey")
  @@index([key], map: "key_userkey")
}

model Token {
  id        Int      @id @default(autoincrement())
  token  String @db.Text
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: SetNull)
  userId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  //@@index([token], map: "token_tokenkey")
  @@index([userId], map: "userId_tokenkey")
}

model Pincode {
  id        Int      @id @default(autoincrement())
  circle_name  String @db.VarChar(256)
  region_name  String @db.VarChar(256)
  division_name  String @db.VarChar(256)
  office_name  String @db.VarChar(256)
  pincode  String @db.VarChar(256)
  office_type  String @db.VarChar(256)
  district  String @db.VarChar(256)
  state_name  String @db.VarChar(256)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model FailedExcel {
  id        Int      @id @default(autoincrement())
  file_name  String @db.Text
  file_of  String @db.VarChar(256)
  user   User? @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: SetNull)
  createdBy Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([createdBy], map: "createdBy_failedExcelkey")
}

model RegistrarMaster {
  id        Int      @id @default(autoincrement())
  registrar_name  String @db.VarChar(256)
  sebi_regn_id  String @db.VarChar(256)
  user   User? @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: SetNull)
  createdBy Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  registrarMasterBranches RegistrarMasterBranch[]

  @@index([createdBy], map: "createdBy_registrarMasterkey")
}

model RegistrarMasterBranch {
  id        Int      @id @default(autoincrement())
  address  String? @db.VarChar(256)
  city  String? @db.VarChar(256)
  state  String? @db.VarChar(256)
  pincode  String? @db.VarChar(256)
  telephone1  String? @db.VarChar(256)
  telephone2  String? @db.VarChar(256)
  email  String? @db.VarChar(256)
  website  String? @db.VarChar(256)
  nameContactPerson  String? @db.VarChar(256)
  designationContactPerson  String? @db.VarChar(256)
  emailContactPerson  String? @db.VarChar(256)
  phoneContactPerson  String? @db.VarChar(256)
  officerAssigned  String? @db.VarChar(256)
  branch  String? @db.VarChar(256)
  registrarMaster   RegistrarMaster? @relation(fields: [registrarMasterID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  registrarMasterID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  companyMasters CompanyMaster[]

  @@index([registrarMasterID], map: "registrarMasterID_registrarMasterBranchkey")
}

model CompanyMaster {
  id        Int      @id @default(autoincrement())
  CIN  String? @db.VarChar(256)
  ISIN  String? @db.VarChar(256)
  faceValue  Decimal? @db.Decimal(11,4) @default(0.0)
  closingPriceNSE  Decimal? @db.Decimal(11,4) @default(0.0)
  closingPriceBSE  Decimal? @db.Decimal(11,4) @default(0.0)
  registeredOffice  String? @db.VarChar(256)
  city  String? @db.VarChar(256)
  state  String? @db.VarChar(256)
  pincode  String? @db.VarChar(256)
  telephone  String? @db.VarChar(256)
  fax  String? @db.VarChar(256)
  email  String? @db.VarChar(256)
  website  String? @db.VarChar(256)
  nameContactPerson  String? @db.VarChar(256)
  designationContactPerson  String? @db.VarChar(256)
  emailContactPerson  String? @db.VarChar(256)
  phoneContactPerson  String? @db.VarChar(256)
  user   User? @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: SetNull)
  createdBy Int?
  registrarMasterBranch   RegistrarMasterBranch? @relation(fields: [registrarMasterBranchId], references: [id], onDelete: Cascade, onUpdate: SetNull)
  registrarMasterBranchId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  nameChangeMasters NameChangeMaster[]
  securityTypeMasters SecurityTypeMaster[]
  shareCertificateMasters ShareCertificateMaster[]
  corporateMasters CorporateMaster[]
  dividendMasters DividendMaster[]
  @@index([createdBy], map: "createdBy_companyMasterkey")
  @@index([registrarMasterBranchId], map: "registrarMasterBranchId_companyMasterkey")
}

model NameChangeMaster {
  id        Int      @id @default(autoincrement())
  NSE  String? @db.VarChar(256)
  BSE  String? @db.VarChar(256)
  previousName  String? @db.VarChar(256)
  currentName  String? @db.VarChar(256)
  dateNameChange DateTime @default(now())
  companyMaster   CompanyMaster? @relation(fields: [companyID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  companyID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([companyID], map: "companyID_nameChangeMasterkey")
}

model SecurityTypeMaster {
  id        Int      @id @default(autoincrement())
  instrumentType      IntrumentType     @default(InvIT)
  Symbol  String? @db.VarChar(256)
  Series  String? @db.VarChar(256)
  securityName  String? @db.VarChar(256)
  dateOfListing DateTime @default(now())
  dateOfAllotment DateTime @default(now())
  redemptionDate DateTime @default(now())
  conversionDate DateTime @default(now())
  paidUpValue  Decimal? @db.Decimal(11,4) @default(0.0)
  dividend  Decimal? @db.Decimal(11,4) @default(0.0)
  redemptionAmount  Decimal? @db.Decimal(11,4) @default(0.0)
  conversionAmount  Decimal? @db.Decimal(11,4) @default(0.0)
  marketLot  String? @db.VarChar(256)
  isinNumber  String? @db.VarChar(256)
  distinctiveNosFrom  String? @db.VarChar(256)
  distinctiveNosTo  String? @db.VarChar(256)
  companyMaster   CompanyMaster? @relation(fields: [companyID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  companyID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([companyID], map: "companyID_securityTypeMasterkey")
}

model ShareCertificateMaster {
  id        Int      @id @default(autoincrement())
  instrumentType      IntrumentType     @default(InvIT)
  companyMaster   CompanyMaster? @relation(fields: [companyID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  companyID Int?
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  folios Folio[]
  cases Case[]

  @@index([companyID, projectID], map: "companyID_shareCertificateMasterkey")
}

model Folio {
  id        Int      @id @default(autoincrement())
  equityType      EquityType     @default(Bonus)
  Folio  String @db.VarChar(256)
  shareholderName1   ShareHolderDetail? @relation(fields: [shareholderName1ID], references: [id], onDelete: Cascade, onUpdate: SetNull, name: "shareholderName1")
  shareholderName1ID Int?
  shareholderName2   ShareHolderDetail? @relation(fields: [shareholderName2ID], references: [id], onDelete: Cascade, onUpdate: SetNull, name: "shareholderName2")
  shareholderName2ID Int?
  shareholderName3   ShareHolderDetail? @relation(fields: [shareholderName3ID], references: [id], onDelete: Cascade, onUpdate: SetNull, name: "shareholderName3")
  shareholderName3ID Int?
  noOfShares  String? @db.VarChar(256)
  noOfSharesWords  String? @db.VarChar(256)
  dateOfAllotment DateTime @default(now())
  faceValue  Decimal? @db.Decimal(11,4) @default(0.0)
  distinctiveNosFrom  String? @db.VarChar(256)
  distinctiveNosTo  String? @db.VarChar(256)
  endorsement      TruthType     @default(No)
  endorsementFolio  String? @db.VarChar(256)
  endorsementDate DateTime @default(now())
  endorsementShareholderName1   ShareHolderDetail? @relation(fields: [endorsementShareholderName1ID], references: [id], onDelete: Cascade, onUpdate: SetNull, name: "endorsementShareholderName1")
  endorsementShareholderName1ID Int?
  endorsementShareholderName2   ShareHolderDetail? @relation(fields: [endorsementShareholderName2ID], references: [id], onDelete: Cascade, onUpdate: SetNull, name: "endorsementShareholderName2")
  endorsementShareholderName2ID Int?
  endorsementShareholderName3   ShareHolderDetail? @relation(fields: [endorsementShareholderName3ID], references: [id], onDelete: Cascade, onUpdate: SetNull, name: "endorsementShareholderName3")
  endorsementShareholderName3ID Int?
  shareCertificateMaster   ShareCertificateMaster? @relation(fields: [shareCertificateID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  shareCertificateID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  certificate Certificate[]

  @@index([shareCertificateID], map: "shareCertificateID_foliokey")
}

model Certificate {
  id        Int      @id @default(autoincrement())
  certificateNumber  String @db.VarChar(256)
  certificateSerialNumber  String? @db.VarChar(256)
  folio   Folio? @relation(fields: [folioID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  folioID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([folioID], map: "folioID_certificatekey")
}

model CorporateMaster {
  id        Int      @id @default(autoincrement())
  date DateTime @default(now())
  type      CorporateActionType     @default(Bonus)
  numerator  String? @db.VarChar(256)
  denominator  String? @db.VarChar(256)
  companyMaster   CompanyMaster? @relation(fields: [companyID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  companyID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([companyID], map: "companyID_corporate_master")
}

model Project {
  id        Int      @id @default(autoincrement())
  name  String @db.VarChar(256)
  createdBy   User? @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  userID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  shareCertificateMasters ShareCertificateMaster[]
  shareHolderDetails ShareHolderDetail[]
  legalHeirDetails LegalHeirDetail[]
  paymentTrackers PaymentTracker[]
  stageTrackers StageTracker[]
  communicationTrackers CommunicationTracker[]
  iepfTrackers IEPFTracker[]
  surety Surety[]
  nomination Nomination[]

  @@index([userID], map: "userID_project")
}


model DividendMaster {
  id        Int      @id @default(autoincrement())
  recorded_date DateTime @default(now())
  financial_year String? @db.VarChar(256)
  dividend_per_share  String? @db.VarChar(256)
  companyMaster   CompanyMaster? @relation(fields: [companyID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  companyID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([companyID], map: "companyID_dividend_master")
}

model ShareHolderDetail {
  id        Int      @id @default(autoincrement())
  shareholderName  String? @db.VarChar(256)
  shareholderNameCertificate  String? @db.VarChar(256)
  namePan  String? @db.VarChar(256)
  nameAadhar  String? @db.VarChar(256)
  nameCml  String? @db.VarChar(256)
  phone  String? @db.VarChar(256)
  email  String? @db.VarChar(256)
  aadhar  String? @db.VarChar(256)
  pan  String? @db.VarChar(256)
  dob  String? @db.VarChar(256)
  age  String? @db.VarChar(256)
  husbandName  String? @db.VarChar(256)
  occupation  String? @db.VarChar(256)
  nationality  String? @db.VarChar(256)
  placeOfBirth  String? @db.VarChar(256)
  city  String? @db.VarChar(256)
  state  String? @db.VarChar(256)
  countryOfBirth  String? @db.VarChar(256)
  DPID  String? @db.VarChar(256)
  dematAccountNo  String? @db.VarChar(256)
  nameBank  String? @db.VarChar(256)
  bankName  String? @db.VarChar(256)
  branchName  String? @db.VarChar(256)
  bankAddress  String? @db.Text
  bankEmail  String? @db.VarChar(256)
  bankPhone  String? @db.VarChar(256)
  bankMICR  String? @db.VarChar(256)
  bankIFS  String? @db.VarChar(256)
  bankAccountNo  String? @db.VarChar(256)
  bankAccountType  String? @db.VarChar(256)
  accountOpeningDate  String? @db.VarChar(256)
  addressBank  String? @db.Text
  isCompany      TruthType     @default(No)
  addressAadhar  String? @db.Text
  CIN  String? @db.VarChar(256)
  companyCIN  String? @db.VarChar(256)
  firstName  String? @db.VarChar(256)
  middleName  String? @db.VarChar(256)
  lastName  String? @db.VarChar(256)
  fatherFirstName  String? @db.VarChar(256)
  fatherMiddleName  String? @db.VarChar(256)
  fatherLastName  String? @db.VarChar(256)
  password  String? @db.VarChar(256)
  confirmPassword  String? @db.VarChar(256)
  hintQuestion  String? @db.Text
  hintAnswer  String? @db.Text
  emailBank  String? @db.VarChar(256)
  phoneBank  String? @db.VarChar(256)
  pincodeBank  String? @db.VarChar(256)
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  folio1 Folio[] @relation(name: "shareholderName1")
  folio2 Folio[] @relation(name: "shareholderName2")
  folio3 Folio[] @relation(name: "shareholderName3")
  endorsementFolio1 Folio[] @relation(name: "endorsementShareholderName1")
  endorsementFolio2 Folio[] @relation(name: "endorsementShareholderName2")
  endorsementFolio3 Folio[] @relation(name: "endorsementShareholderName3")
  deadShareholder Case[] @relation(name: "deadShareholder")

  @@index([projectID], map: "projectID_shareHolderDetailkey")
}

model LegalHeirDetail {
  id        Int      @id @default(autoincrement())
  namePan  String? @db.VarChar(256)
  nameAadhar  String? @db.VarChar(256)
  nameCml  String? @db.VarChar(256)
  phone  String? @db.VarChar(256)
  email  String? @db.VarChar(256)
  aadhar  String? @db.VarChar(256)
  pan  String? @db.VarChar(256)
  dob  String? @db.VarChar(256)
  age  String? @db.VarChar(256)
  husbandName  String? @db.VarChar(256)
  occupation  String? @db.VarChar(256)
  nationality  String? @db.VarChar(256)
  placeOfBirth  String? @db.VarChar(256)
  city  String? @db.VarChar(256)
  state  String? @db.VarChar(256)
  countryOfBirth  String? @db.VarChar(256)
  DPID  String? @db.VarChar(256)
  dematAccountNo  String? @db.VarChar(256)
  nameBank  String? @db.VarChar(256)
  bankName  String? @db.VarChar(256)
  branchName  String? @db.VarChar(256)
  bankAddress  String? @db.Text
  bankEmail  String? @db.VarChar(256)
  bankPhone  String? @db.VarChar(256)
  bankMICR  String? @db.VarChar(256)
  bankIFS  String? @db.VarChar(256)
  bankAccountNo  String? @db.VarChar(256)
  bankAccountType  String? @db.VarChar(256)
  accountOpeningDate  String? @db.VarChar(256)
  addressBank  String? @db.Text
  addressAadhar  String? @db.Text
  CIN  String? @db.VarChar(256)
  companyCIN  String? @db.VarChar(256)
  firstName  String? @db.VarChar(256)
  middleName  String? @db.VarChar(256)
  lastName  String? @db.VarChar(256)
  fatherFirstName  String? @db.VarChar(256)
  fatherMiddleName  String? @db.VarChar(256)
  fatherLastName  String? @db.VarChar(256)
  password  String? @db.VarChar(256)
  confirmPassword  String? @db.VarChar(256)
  hintQuestion  String? @db.Text
  hintAnswer  String? @db.Text
  emailBank  String? @db.VarChar(256)
  phoneBank  String? @db.VarChar(256)
  pincodeBank  String? @db.VarChar(256)
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([projectID], map: "projectID_legalHeirDetailkey")
}

model Case {
  id        Int      @id @default(autoincrement())
  caseType      CaseType     @default(Claim)
  folios  String? @db.Text
  transpositionOrder  String? @db.Text
  isDeceased      TruthType     @default(No)
  shareholderNameDeath  String? @db.VarChar(256)
  dod  String? @db.VarChar(256)
  placeOfDeath  String? @db.VarChar(256)
  isTestate      TruthType     @default(No)
  proofOfSucession      TruthType     @default(No)
  document  String? @db.Text
  dateOfDocument  String? @db.VarChar(256)
  isMinor      TruthType     @default(No)
  dobMinor  String? @db.VarChar(256)
  guardianName  String? @db.VarChar(256)
  guardianRelationship  String? @db.VarChar(256)
  guardianPan  String? @db.VarChar(256)
  deceasedRelationship  String? @db.VarChar(256)
  taxStatus  String? @db.VarChar(256)
  allowAffidavit      TruthType     @default(No)
  selectAffidavitShareholder  String? @db.VarChar(256)
  selectAffidavitLegalHeir  String? @db.VarChar(256)
  selectClaimant  String? @db.VarChar(256)
  statusClaimant  String? @db.VarChar(256)
  percentageClaimant  String? @db.VarChar(256)
  occupationClaimant  String? @db.VarChar(256)
  politicalExposureClaimant  String? @db.VarChar(256)
  annualIncomeClaimant  String? @db.VarChar(256)
  deadShareholder   ShareHolderDetail? @relation(fields: [deadShareholderID], references: [id], onDelete: Cascade, onUpdate: SetNull, name: "deadShareholder")
  deadShareholderID Int?
  shareCertificateMaster   ShareCertificateMaster? @relation(fields: [shareCertificateID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  shareCertificateID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([shareCertificateID], map: "shareCertificateID_casekey")
}

model PaymentTracker {
  id        Int      @id @default(autoincrement())
  valuation  Decimal? @db.Decimal(11,4) @default(0.0)
  percentageTotal  Decimal? @db.Decimal(11,4) @default(0.0)
  noOfStages  Int? @default(0)
  percentageStage  Decimal? @db.Decimal(11,4) @default(0.0)
  noOfStagesReferral  Int? @default(0)
  percentageStageReferral  Decimal? @db.Decimal(11,4) @default(0.0)
  amountReferral  Decimal? @db.Decimal(11,4) @default(0.0)
  tdsFlag      TruthType     @default(No)
  tdsPercentage  Decimal? @db.Decimal(11,4) @default(0.0)
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  paymentTrackerStages PaymentTrackerStages[]
  referralTrackerStages ReferralTrackerStages[]
  

  @@index([projectID], map: "projectID_paymentTrackerkey")
}

model PaymentTrackerStages {
  id        Int      @id @default(autoincrement())
  status  PaymentStatus @default(InvoiceSent)
  amount  Decimal? @db.Decimal(11,4) @default(0.0)
  paymentTracker   PaymentTracker? @relation(fields: [paymentTrackerID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  paymentTrackerID Int?
  date  String? @db.VarChar(256)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([paymentTrackerID], map: "paymentTrackerID_paymentTrackerkey")
}

model ReferralTrackerStages {
  id        Int      @id @default(autoincrement())
  amount  Decimal? @db.Decimal(11,4) @default(0.0)
  status  PaymentStatus @default(InvoiceSent)
  paymentTracker   PaymentTracker? @relation(fields: [paymentTrackerID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  paymentTrackerID Int?
  date  String? @db.VarChar(256)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([paymentTrackerID], map: "paymentTrackerID_paymentTrackerkey")
}

model StageNames {
  id        Int      @id @default(autoincrement())
  name  String @db.VarChar(256)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model StageTracker {
  id        Int      @id @default(autoincrement())
  pendingFrom      PendingFromType     @default(Client)
  stage  String @db.VarChar(256)
  date  String? @db.VarChar(256)
  comments  String? @db.Text
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  

  @@index([projectID], map: "projectID_stageTrackerkey")
}

model CommunicationTracker {
  id        Int      @id @default(autoincrement())
  stage      CommunicationStageType     @default(DocumentsCouriered)
  folios  String? @db.Text
  dateSent  String? @db.VarChar(256)
  dateReceived  String? @db.VarChar(256)
  comments  String? @db.Text
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  

  @@index([projectID], map: "projectID_communicationTrackerkey")
}

model IEPFTracker {
  id        Int      @id @default(autoincrement())
  shareHolderDetails  String? @db.Text
  legalHeirDetails  String? @db.Text
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  

  @@index([projectID], map: "projectID_iepfTrackerkey")
}

model Surety {
  id        Int      @id @default(autoincrement())
  companyName  String @db.VarChar(256)
  fullName  String @db.VarChar(256)
  age  String? @db.VarChar(256)
  address  String? @db.Text
  isEmployed      TruthType     @default(No)
  employerName  String? @db.VarChar(256)
  salary  String? @db.VarChar(256)
  employerAddress  String? @db.Text
  isBusiness      TruthType     @default(No)
  businessName  String? @db.VarChar(256)
  businessNature  String? @db.VarChar(256)
  businessIncome  String? @db.VarChar(256)
  businessProfit  String? @db.VarChar(256)
  businessAddress  String? @db.Text
  isProperty      TruthType     @default(No)
  propertyType  String? @db.VarChar(256)
  propertySituation  String? @db.VarChar(256)
  propertyValue  String? @db.VarChar(256)
  propertyRent  String? @db.VarChar(256)
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  

  @@index([projectID], map: "projectID_suretykey")
}

model Nomination {
  id        Int      @id @default(autoincrement())
  companyName  String @db.VarChar(256)
  fullName  String @db.VarChar(256)
  age  String? @db.VarChar(256)
  address  String? @db.Text
  isEmployed      TruthType     @default(No)
  employerName  String? @db.VarChar(256)
  salary  String? @db.VarChar(256)
  employerAddress  String? @db.Text
  isBusiness      TruthType     @default(No)
  businessName  String? @db.VarChar(256)
  businessNature  String? @db.VarChar(256)
  businessIncome  String? @db.VarChar(256)
  businessProfit  String? @db.VarChar(256)
  businessAddress  String? @db.Text
  isProperty      TruthType     @default(No)
  propertyType  String? @db.VarChar(256)
  propertySituation  String? @db.VarChar(256)
  propertyValue  String? @db.VarChar(256)
  propertyRent  String? @db.VarChar(256)
  project   Project? @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: SetNull)
  projectID Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  

  @@index([projectID], map: "projectID_nominationkey")
}